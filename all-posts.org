#+HUGO_BASE_DIR: ./
#+HUGO_SECTION: posts/

#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t
#+STARTUP: show2levels

* Emacs :@emacs:
All posts in here will have the category set to /emacs/

** TODO (Emacs 29) Automatically Using Tree-sitter Modes
:properties:
:export_file_name: emacs-treesit-auto
:export_date: <2023-01-22 Sun>
:export_hugo_menu: :menu "main"
:end:

Recently, [[https://www.reddit.com/user/casouri/][/u/casouri]] posted a guide to getting started with the new built-in
tree-sitter capabilities for Emacs 29.  [[https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/index.html][In that post]], they mention that there
will be no automatic major-mode fallback for Emacs 29.  That means, in order to
take advantage of the tree-sitter enhanced major mode for Python, I would have
to use =M-x python-ts-mode= manually, or change the entry in =auto-mode-alist= to
use =python-ts-mode=.  Of course, that would still leave the problem of when the
Python tree-sitter grammar isn't installed, in which case =python-ts-mode= is
going to fail.

To ensure the right mode is automatically selected, the recommendation in the
article was to use =define-derived-mode= along with =treesit-ready-p= to hack a
behavior similar to major-mode fallback.  In the NEWS (=C-h n=), however, I
noticed a new variable =major-mode-remap-alist=, which at a glance appears
suitable for a similar cause.  For my Emacs configuration, I had two things I
wanted to accomplish:

1. Set all of the URLs for =treesit-language-source-alist= up front, so that I
   need only use =treesit-install-language-grammar RET python RET=, instead of
   writing out everything interactively
2. Use the same list of available grammars to remap between tree-sitter modes
   and their default fallbacks

Initially, I tried Yuan's suggested approach with =define-derived-mode=, but I
didn't want to repeat code for every major mode I wanted fallback for.  Trying
to expand the major mode names correctly in a loop wound up unwieldy, because
expanding the names properly for the =define-derived-mode= macro was a bit
challenging, and wound up cluttering the global namespace with new modes more
than I liked.

The approach I took instead will be detailed below, but in case you're just
interested in getting automatic tree-sitter fallback, you can try the package I
wound up with.

*** For the impatient: ~treesit-auto.el~
The package I wound up with is available on GitHub as [[https://github.com/renzmann/treesit-auto.el][treesit-auto.el]].  Using
=package-vc-install=, you can get it right away, and just =use-package= or =require= to load it:

#+begin_example
M-x package-vc-install RET https://github.com/renzmann/treesit-auto.el
#+end_example

Then, in your configuration file:

#+begin_src emacs-lisp
  (use-package treesit-auto
    :demand t)
#+end_src

Once I learn how ELPA and MELPA work, I'll try to publish this package there, too.

*** How the ~treesit-auto.el~ works
In contrast to Yuan's suggestion, I decided take a two step approach:

1. Set up =treesit-language-source-alist= with the grammars I'll probably use
2. Loop over the keys in this alist to define the association between a
   tree-sitter mode and its default fallback through =major-mode-remap-alist=

This makes the code we need to actually write a little simpler, since an
association like =python-mode= to =python-ts-mode= can be automatic (since they
share a name), and we can use a customizable alist for specifying the edge
cases, such as =toml-ts-mode= falling back to =conf-toml-mode=.  To start with, I just had this:

#+begin_src emacs-lisp
(setq treesit-language-source-alist
  '((bash "https://github.com/tree-sitter/tree-sitter-bash")
    (c "https://github.com/tree-sitter/tree-sitter-c")
    (cmake "https://github.com/uyha/tree-sitter-cmake")
    (common-lisp "https://github.com/theHamsta/tree-sitter-commonlisp")
    (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
    (css "https://github.com/tree-sitter/tree-sitter-css")
    (csharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
    (elisp "https://github.com/Wilfred/tree-sitter-elisp")
    (go "https://github.com/tree-sitter/tree-sitter-go")
    (go-mod "https://github.com/camdencheek/tree-sitter-go-mod")
    (html "https://github.com/tree-sitter/tree-sitter-html")
    (js . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
    (json "https://github.com/tree-sitter/tree-sitter-json")
    (lua "https://github.com/Azganoth/tree-sitter-lua")
    (make "https://github.com/alemuller/tree-sitter-make")
    (markdown "https://github.com/ikatyang/tree-sitter-markdown")
    (python "https://github.com/tree-sitter/tree-sitter-python")
    (r "https://github.com/r-lib/tree-sitter-r")
    (rust "https://github.com/tree-sitter/tree-sitter-rust")
    (toml "https://github.com/tree-sitter/tree-sitter-toml")
    (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
    (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
    (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src

At this point, I can just use =M-x treesit-install-language-grammar RET bash= to
get the Bash grammar, and similarly for other languages.  Then, I made an alist
of the "weird" cases:

#+begin_src emacs-lisp
  (setq treesit-auto-fallback-alist
        '((toml-ts-mode . conf-toml-mode)
          ;; I don't actually know if the future tree-sitter mode for HTML will be
          ;; called html-ts-mode or mhtml-ts-mode, but if it's the former I'd include this
          (html-ts-mode . mhtml-mode)
          ;; See the note in their README: https://github.com/emacs-typescript/typescript.el#a-short-note-on-development-halt
          (typescript-ts-mode . nil)
          (tsx-ts-mode . nil)))
#+end_src

Setting the CDR to =nil= explicitly means I didn't want any type of fallback to be
attempted whatsoever for a given tree-sitter mode, even if something similarly
named might be installed.

Finally, I had a simple loop where I constructed the symbols for the mode and
the tree-sitter mode via =intern= and =concat=, and check whether the tree-sitter
version is available through =treesit-ready-p=.  If it is, we remap the base mode
to the tree-sitter one in =major-mode-remap-alist=.  If it /isn't/ ready, then we do
the opposite: remap the tree-sitter mode to the base version.

#+begin_src emacs-lisp
  (dolist (language-source treesit-install-language-grammar)
    (let* ((name (car language-source))
           (name-ts-mode (intern (concat (symbol-name name) "-ts-mode")))
           (fallback-assoc (assq name-ts-mode treesit-auto-fallback-alist))
           (fallback-name (cdr fallback-assoc))
           (name-mode (or fallback-name
                          (intern (concat (symbol-name name) "-mode"))))
           (name-mode-bound-p (fboundp name-mode))
           (skip-remap-p (and fallback-assoc
                              (not (cdr fallback-assoc)))))
      (and (not skip-remap-p)
           (fboundp name-ts-mode)
           (if (treesit-ready-p name t)
               (add-to-list 'major-mode-remap-alist `(,name-mode . ,name-ts-mode))
             (when name-mode-bound-p
               (add-to-list 'major-mode-remap-alist `(,name-ts-mode . ,name-mode)))))))
#+end_src

Of course, the [[https://github.com/renzmann/treesit-auto/blob/d3fc07db6d646bee5631bdd28f6e82d2e0690d6d/treesit-auto.el#L96-L110][actual code]] has a bit more wrapped around it, but the core idea
is more or less the same.

** TODO Fully Remote Python Development in Emacs         :python:remote:lsp:
:properties:
:export_file_name: emacs-remote-python
:export_date: <2022-10-29>
:export_hugo_menu: :menu "main"
:end:

*** Lay of the land

**** TRAMP vs. SSH + TTY

*** Remote virtual environments

*** Remote LSP

** TODO Inline =matplotlib= Images in Org-mode

Less intuitive than we might hope.

#+begin_src shell :results no
python3 -m venv .venv
.venv/bin/python -m pip install matplotlib
#+end_src

#+RESULTS:
| Collecting   | matplotlib                                     |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Downloading  | matplotlib-3.6.2-cp39-cp39-macosx_10_12_x86_64.whl | (7.3                                      | MB)           |                  |                  |                  |              |                |              |                 |                       |            |            |
| Collecting   | pillow>=6.2.0                                  |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Downloading  | Pillow-9.3.0-cp39-cp39-macosx_10_10_x86_64.whl     | (3.3                                      | MB)           |                  |                  |                  |              |                |              |                 |                       |            |            |
| Collecting   | packaging>=20.0                                |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Using        | cached                                         | packaging-21.3-py3-none-any.whl           | (40           | kB)              |                  |                  |              |                |              |                 |                       |            |            |
| Collecting   | kiwisolver>=1.0.1                              |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Downloading  | kiwisolver-1.4.4-cp39-cp39-macosx_10_9_x86_64.whl  | (65                                       | kB)           |                  |                  |                  |              |                |              |                 |                       |            |            |
| Collecting   | fonttools>=4.22.0                              |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Downloading  | fonttools-4.38.0-py3-none-any.whl              | (965                                      | kB)           |                  |                  |                  |              |                |              |                 |                       |            |            |
| Collecting   | python-dateutil>=2.7                           |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Using        | cached                                         | python_dateutil-2.8.2-py2.py3-none-any.whl | (247          | kB)              |                  |                  |              |                |              |                 |                       |            |            |
| Collecting   | pyparsing>=2.2.1                               |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Using        | cached                                         | pyparsing-3.0.9-py3-none-any.whl          | (98           | kB)              |                  |                  |              |                |              |                 |                       |            |            |
| Collecting   | cycler>=0.10                                   |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Downloading  | cycler-0.11.0-py3-none-any.whl                 | (6.4                                      | kB)           |                  |                  |                  |              |                |              |                 |                       |            |            |
| Collecting   | contourpy>=1.0.1                               |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Downloading  | contourpy-1.0.6-cp39-cp39-macosx_10_9_x86_64.whl   | (240                                      | kB)           |                  |                  |                  |              |                |              |                 |                       |            |            |
| Collecting   | numpy>=1.19                                    |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Using        | cached                                         | numpy-1.23.4-cp39-cp39-macosx_10_9_x86_64.whl | (18.1         | MB)              |                  |                  |              |                |              |                 |                       |            |            |
| Collecting   | six>=1.5                                       |                                           |               |                  |                  |                  |              |                |              |                 |                       |            |            |
| Using        | cached                                         | six-1.16.0-py2.py3-none-any.whl           | (11           | kB)              |                  |                  |              |                |              |                 |                       |            |            |
| Installing   | collected                                      | packages:                                 | six,          | pyparsing,       | numpy,           | python-dateutil, | pillow,      | packaging,     | kiwisolver,  | fonttools,      | cycler,               | contourpy, | matplotlib |
| Successfully | installed                                      | contourpy-1.0.6                           | cycler-0.11.0 | fonttools-4.38.0 | kiwisolver-1.4.4 | matplotlib-3.6.2 | numpy-1.23.4 | packaging-21.3 | pillow-9.3.0 | pyparsing-3.0.9 | python-dateutil-2.8.2 | six-1.16.0 |            |

Without running a session, here is the most basic functional example

#+begin_src python :python .venv/bin/python :results file
from random import random

import matplotlib.pyplot as plt

xs = [random() for _ in range(100)]
ys = [random() for _ in range(100)]

fig, ax = plt.subplots(figsize=(5, 5))
ax.scatter(xs, ys)
ax.set_title("A Random Scatterplot")
fig.savefig("demo.png")
return "demo.png"
#+end_src

#+RESULTS:
[[file:demo.png]]

It's annoying how we have to specify the file name twice, so we can tangle in a variable as a header arg too

#+begin_src python :python .venv/bin/python :results file :var fp="demo.png"
from random import random

import matplotlib.pyplot as plt

xs = [random() for _ in range(100)]
ys = [random() for _ in range(100)]

fig, ax = plt.subplots(figsize=(5, 5))
ax.scatter(xs, ys)
ax.set_title("A Random Scatterplot")
fig.savefig(fp)
return fp
#+end_src
#+attr_html: :width 500
#+RESULTS:
[[file:hello.png]]

** DONE Moving My Emacs Configuration to a Literate Programming Document
:properties:
:export_file_name: emacs-literate-announcement
:export_date: <2022-11-21 Mon>
:end:

I've got a (relatively) stable version of my Emacs configuration as a literate document now.  It's easy to read either on [[https://github.com/renzmann/.emacs.d#my-literate-emacsd][my GitHub]] or [[https://robbmann.io/emacsd][my website]].  The website version may lag behind my GitHub verison a bit, but they should be pretty close.  Many thanks to the maintainers of [[https://ox-hugo.scripter.co/][ox-hugo]] for making it possible.


** DONE Virtual Environments with Eglot, Tramp, and Pyright :python:lsp:eglot:tramp:remote:
:properties:
:export_file_name: emacs-eglot-pyrightconfig
:export_date: <2022-11-19 Sat>
:end:

*** Motivation

My most reliable setup for developing Python projects on remote hosts with LSP support
 so far has been with [[https://github.com/joaotavora/eglot][eglot]] and [[https://github.com/microsoft/pyright][pyright]].  I've also tried [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] with ~pyright~, and
both of ~lsp-mode~ and ~eglot~ with the [[https://github.com/python-lsp/python-lsp-server][python-lsp-server]], however I've landed on ~eglot~ +
~pyright~ for a few reasons:

1. ~eglot~ requires zero configuration to work over Tramp, unlike ~lsp-mode~.
2. Fewest number of Tramp hangs.  This /could/ just be a symptom of my particular setup,
   though.
3. ~eglot~ will have built-in support in future Emacs versions.  This may or may not be
   worth a damn to other Emacs users.
4. ~pyright~ has been strictly faster at error checking and diagnostic updates as
   compared to ~python-language-server~ in the machines I'm using.

One hiccup remained though: ~pyright~ is typically a system or user installation, not
something you install per virtual environment.  Getting ~pyright~ to see the virtual
environment of my choosing , and correctly report which dependencies are installed was a
bit of a hassle, but I think my favorite solution so far has been to configure the virtual
environment through the ~pyrightconfig.json~ file at the root of my project, and just have
this file ignored by git.  Typically, ~pyrightconfig.json~ looks like this:

#+begin_src js
{
    "venvPath": "/absolute/path/to/dir/",
    "venv": ".venv"
}
#+end_src

I'm pretty happy with the other default configurations for ~pyright~, so I leave those be,
and just configure the virtual environment path this way.  What was annoying me, though,
is that I'd need to write out this absolute path for each machine I clone a project into,
since relative paths and shortcuts using ~~~ aren't supported.  Much better if we can just
have Emacs do it for us.

In the spirit of other Emacs/Python tools like ~pythonic~ and ~pyvenv~ for activating virtual
environments, I wanted something that would just prompt for a directory using
=completing-read=, and then populate the contents of ~pyrightconfig.json~ automatically based
on my selection.

*** Getting Functions That Write ~pyrightconfig.json~

*Edit 2022-11-20:* Thanks to Mickey Petersen of [[https://www.masteringemacs.org/][mastering emacs]] for pointing out that
=json-encode= exists.  I originally had my own function =pyrightconfig--json-contents= here,
but I've modified the function below to use this built-in version instead.


We really just need to do three things:

1. Prompt for a directory that houses a Python virtual environment
2. Break the result into an absolute parent path + base name, cleaning any Tramp prefix in
   the process
3. Write the contents of =pyrightconfig--json-contents= using the previous result to a file
   in the version control root.

It's worth mentioning that we /must/ put this file in the VC root, otherwise ~eglot~ just
won't pick it up.  For my purposes, the VC system will always be git, so I'm going to make
an assumption here and use =vc-git-root= instead of something more generic.

#+begin_src emacs-lisp
(defun pyrightconfig-write (virtualenv)
  (interactive "DEnv: ")

  (let* (;; file-truename and tramp-file-local-name ensure that neither `~' nor
         ;; the Tramp prefix (e.g. "/ssh:my-host:") wind up in the final
         ;; absolute directory path.
         (venv-dir (tramp-file-local-name (file-truename virtualenv)))

         ;; Given something like /path/to/.venv/, this strips off the trailing `/'.
         (venv-file-name (directory-file-name venv-dir))

         ;; Naming convention for venvPath matches the field for
         ;; pyrightconfig.json.  `file-name-directory' gets us the parent path
         ;; (one above .venv).
         (venvPath (file-name-directory venv-file-name))

         ;; Grabs just the `.venv' off the end of the venv-file-name.
         (venv (file-name-base venv-file-name))

         ;; Eglot demands that `pyrightconfig.json' is in the project root
         ;; folder.
         (base-dir (vc-git-root default-directory))
         (out-file (expand-file-name "pyrightconfig.json" base-dir))

         ;; Finally, get a string with the JSON payload.
         (out-contents (json-encode (list :venvPath venvPath :venv venv))))

    ;; Emacs uses buffers for everything.  This creates a temp buffer, inserts
    ;; the JSON payload, then flushes that content to final `pyrightconfig.json'
    ;; location
    (with-temp-file out-file (insert out-contents))))
#+end_src

Here's a quick demo where I interactively choose a virtual environment directory, write
the ~pyrightconfig.json~, launch ~eglot~, and use =M-.= to leverage the LSP's jump-to-definition
of a library, then show that the library we jumped to is indeed inside the virtual
environment.

[[file:content/pyrightconfig-demo.gif]]

*** Follow-ups

Feel free to [[https://github.com/renzmann/.emacs.d/blob/30480545b04ac05448af32bd796d8cb8edda531f/site-lisp/pyrightconfig.el][take this package]] and modify it to suit your needs.  Over time I
might make some modifications to it:

1. Maybe integrate with the variety of ~activate~ functions?  So activating or setting a
   venv root for use with ~run-python~ automatically sets this.
2. Support other VC roots than just git
3. I'd love to get to VSCode-like intelligence about common venv locations and
   just prompt for those automatically through =completing-read=, instead of going
   through the pathing processing myself.  Maybe that would become a function
   like =pyrightconfig-suggest=.

** DONE The ~*Completions*~ Buffer Gets a Big Upgrade in Emacs 29
:properties:
:export_file_name: emacs-29-completions
:export_date: <2023-01-06 Fri>
:end:

There's been a lot of talk about how ~eglot~ and ~tree-sitter~ will be distributed
with Emacs 29, but I've seen less buzz around the new functionality coming to
the vanilla \ast{}Completions\ast{} buffer.  Now, I've been an ardent [[https://github.com/minad/vertico][vertico]] +
[[https://github.com/oantolin/orderless][orderless]] + [[https://github.com/minad/marginalia/][marginalia]] + [[https://github.com/minad/corfu][corfu]] user since seriously picking up Emacs over the
summer, and when initially looking for options I found [[https://protesilaos.com/emacs/mct][Prot's MCT]] pretty
alluring.  I didn't choose it since he had already decided to [[https://protesilaos.com/codelog/2022-04-14-emacs-discontinue-mct/][discontine
development]] given upcoming changes in Emacs 29, and as of writing even he
opted for [[https://git.sr.ht/~protesilaos/dotfiles/tree/437a303b90b3354ca1a1d08cb2f793183d1b4c48/item/emacs/.emacs.d/prot-emacs-modules/prot-emacs-completion.el#L141][vertico]] and [[https://git.sr.ht/~protesilaos/dotfiles/tree/437a303b90b3354ca1a1d08cb2f793183d1b4c48/item/emacs/.emacs.d/prot-emacs-modules/prot-emacs-completion.el#L300][corfu]].

There is still that tempting, bitter fruit on the horizon though - maximizing
everything I can out of the vanilla Emacs experience.  Getting to that mythical
"vanilla extract" that keeps my muscle memory nearly entirely intact between
~emacs -Q~ and my config (check out "Goals" in my [[https://robbmann.io/emacsd/#goals][.emacs.d]] to see the reasoning
behind why I would want this).

Now that =treesit.el=, ~use-package~, and ~eglot~ are all merged into the ~emacs-29~
branch, I finally decided to give our good old friend the \ast{}Completions\ast{} buffer
another try, so that you don't have to.

(Some verbiage below is taken directly from ~C-h n~ (~view-emacs-news~))

*** New 'visible' and 'always' values for 'completion-auto-help'
There are two new values to control the way the "\ast{}Completions\ast{}" buffer behaves
after pressing a 'TAB' if completion is not unique.

The (old) default value ~t~ always hides the completion buffer after some
completion is made.

#+begin_src emacs-lisp
(setq completion-auto-help t)
#+end_src

file:content/licecap/completion/auto-help-t.gif

The value 'always' updates or shows the \ast{}Completions\ast{} buffer after any attempt
to complete, including the first time we press TAB.  Comparing to the one above,
notice that the buffer pops up as soon as I complete =~/.emacs.d/=.  Before, I had
to start another completion by typing =tra<TAB>=.  Also, after completing
=transient/=, the buffer once again updates with the contents of that directory.

#+begin_src emacs-lisp
(setq completion-auto-help 'always)
#+end_src

file:content/licecap/completion/auto-help-always.gif

The value 'visible' is like 'always', but only updates the completions if they
are already visible.  The main difference in this one is that we don't get the
\ast{}Completions\ast{} buffer on the first TAB for =~/.emacs.d/=:

#+begin_src emacs-lisp
(setq completion-auto-help 'visible)
#+end_src

file:content/licecap/completion/auto-help-visible.gif

If your goal is reduction of visual noise because you already know how a chain
of =TAB='s are going to complete, then 'visible' seems like a good option.

*** The \ast{}Completions\ast{} buffer can now be automatically selected.
This was my biggest gripe with \ast{}Completions\ast{} and what made it downright unusable
for completion-at-point.  Here's what the current behavior looks like with
completion in a buffer:

#+begin_src emacs-lisp
(setq completion-auto-select nil)
#+end_src

[[file:content/licecap/completion/auto-select-nil.gif]]

In the minibuffer, we've always had =M-v= to switch to \ast{}Completions\ast{}, but there
was no analogue for completion-in-region.  Now, in Emacs 29, we can set
~completion-auto-select~ to one of ~t~ or ~second-tab~ to enable automatic selection
of the "\ast{}Completions\ast{}" buffer

#+begin_src emacs-lisp
(setq completion-auto-select t)
#+end_src

[[file:content/licecap/completion/auto-select-t.gif]]

If the value is 'second-tab', then the first ~TAB~ will display "\ast{}Completions\ast{}",
and the second one will switch to the "\ast{}Completions\ast" buffer.

#+begin_src emacs-lisp
(setq completion-auto-select 'second-tab)
#+end_src

[[file:content/licecap/completion/auto-select-second-tab.gif]]

With 'second-tab', I can use the "\ast{}Completions\ast{}" buffer a lot like how I would
use ~corfu~: type a bit, request completion with TAB, examine the list, and keep
typing to narrow the candidates, and request completion again.  If I see the
option I like, I just hit TAB a few times to get it.

*** New commands for navigating completions from the minibuffer.
 * ~M-<up>~ and ~M-<down>~ for ~minibuffer-next-completion~ and ~minibuffer-previous-completion~
 * ~M-RET~ to choose active candidate
 * ~C-u M-RET~ to insert active candidate without exiting minibuffer
 * ~C-x <up>~ (~minibuffer-complete-history~) is like ~minibuffer-complete~ but
   completes on the history items instead of the default completion table.
 * ~C-x <down>~ (~minibuffer-complete-defaults~) is like =minibuffer-complete=, but
   completes on the default items instead of the completion table.

The first two also work for ~completion-at-point~ (in-buffer completion).

file:content/licecap/completion/completion-nav-commands.gif

Some may find the arrow keys an unfortunate choice, though, and bind something
more convenient:

#+begin_src emacs-lisp
;; Up/down when completing in the minibuffer
(define-key minibuffer-local-map (kbd "C-p") #'minibuffer-previous-completion)
(define-key minibuffer-local-map (kbd "C-n") #'minibuffer-next-completion)

;; Up/down when competing in a normal buffer
(define-key completion-in-region-mode-map (kbd "C-p") #'minibuffer-previous-completion)
(define-key completion-in-region-mode-map (kbd "C-n") #'minibuffer-next-completion)
#+end_src

My apologies to [[https://www.scss.tcd.ie/~sulimanm/posts/default-emacs-completion.html][Mohamed Suliman]], since I was also not able to figure out a fix
for =eshell= that permits the use of =M-<up>= and =M-<down>= with =M-RET=.  The issue
there, it seems, is that =eshell= uses its own =pcomplete= instead of
=completion-at-point=, which comes from =minibuffer.el=.  I have, however, had
success simply using =TAB= and =BACKTAB= with =RET=, by setting =completion-auto-select=
to ='second-tab=, as shown above.

*** New user option 'completions-sort'.
Much like how oantolin's [[https://github.com/oantolin/live-completions][live-completions]] gave us a way to sort candidates in
\ast{}Completions\ast{}, we now have a built-in method for specifying the sorting
function.  I took inspiration from [[https://github.com/protesilaos/mct#101-sort-completion-candidates-on-emacs-29][Prot's MCT documentation]] here to put
candidates I use frequently near the top, followed by the length of their name.

#+begin_src emacs-lisp
(defun renz/sort-by-alpha-length (elems)
  "Sort ELEMS first alphabetically, then by length."
  (sort elems (lambda (c1 c2)
                (or (string-version-lessp c1 c2)
                    (< (length c1) (length c2))))))

(defun renz/sort-by-history (elems)
  "Sort ELEMS by minibuffer history.
Use `mct-sort-sort-by-alpha-length' if no history is available."
  (if-let ((hist (and (not (eq minibuffer-history-variable t))
                      (symbol-value minibuffer-history-variable))))
      (minibuffer--sort-by-position hist elems)
    (renz/sort-by-alpha-length elems)))

(defun renz/completion-category ()
  "Return completion category."
  (when-let ((window (active-minibuffer-window)))
    (with-current-buffer (window-buffer window)
      (completion-metadata-get
       (completion-metadata (buffer-substring-no-properties
                             (minibuffer-prompt-end)
                             (max (minibuffer-prompt-end) (point)))
                            minibuffer-completion-table
                            minibuffer-completion-predicate)
       'category))))

(defun renz/sort-multi-category (elems)
  "Sort ELEMS per completion category."
  (pcase (renz/completion-category)
    ('nil elems) ; no sorting
    ('kill-ring elems)
    ('project-file (renz/sort-by-alpha-length elems))
    (_ (renz/sort-by-history elems))))

(setq completions-sort #'renz/sort-multi-category)
#+end_src

*** Other Niceties
 * ~completions-max-height~ limits the height of the "\ast{}Completions\ast{}" buffer
 * ~completions-header-format~ is a string to control the heading line to show in
   the "\ast{}Completions\ast{}" buffer before the list of completions

*** Do We Stick With Vanilla Extract?
Now the fun part - let's tally pros and cons to see if I should abandon
everything for the Vanilla behavior:

| property                                           | score |
|----------------------------------------------------+-------|
| Consistent minibuffer + CAP                        |    +1 |
| Vanilla GUI + TTY support                          |    +1 |
| No marginalia for sole completion                  |  -0.5 |
| Extra key press to cycle/complete                  |  -0.5 |
| Candidates not buffered until requested            |    -2 |
| Eyes shift focus to another part of screen for CAP |  -0.5 |
|----------------------------------------------------+-------|
| Total                                              |  -1.5 |

In my typical day, I need to have a working TTY /and/ GUI version of Emacs, so
when something /just works/ for both, that's a +1 for me.  Corfu does have
[[https://codeberg.org/akib/emacs-corfu-terminal][corfu-terminal]], but it's maintained separately.  Also, having a consistent
interface for both the minibuffer and completion-at-point shrinks the
configuration domain, making it easier to maintain my config over time.

Unfortunately, in the case that there's only one completion candidate,
marginalia isn't triggered, so I don't get to see a key binding or flavor text
alongside the candidate I choose.  Vanilla Emacs will remind me about what key
combination I /could/ have used, which I can check any time with ~C-h e~ (the
\ast{}Messages\ast{} buffer), and I can use ~C-h f~ directly from the minibuffer, so this
only get -0.5.  The fact that I need extra key strikes compared to something
like Corfu's Tab-N-Go is an annoyance, but just requires a bit of muscle memory
change.  The real impasse here, though, is that candidates aren't shown until
requested.  I think Prot summed it up best here:

#+begin_quote
Vertico has official extensions which can make it work exactly like MCT without
any of MCT’s drawbacks. These extensions can also expand Vertico’s powers such
as by providing granular control over the exact style of presentation for any
given completion category (e.g. display Imenu in a separate buffer, show the
switch-to-buffer list horizontally in the minibuffer, and present find-file in a
vertical list—whatever the user wants).
#+end_quote

So will I stick with just \ast{}Completions\ast{}?  No, probably not.  But these changes
do put the default completion system squarely in the "usable" category, which
I'm not sure I could have said before Emacs 29.  I will give it an
honest chance to see just how far I can push it, [[https://github.com/protesilaos/mct#12-alternatives][much in the spirit of MCT]],
before switching Vertico and Corfu back on.
